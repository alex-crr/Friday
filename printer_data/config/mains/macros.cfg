[pause_resume]

[display_status]

[respond]

[exclude_object]

[skew_correction]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro END_PRINT]
gcode = 
	M104 S0
	M107
	G91
	G1 Z15 X-10 Y-10 E-1 F2400
	G90
	G1 X0 Y200
	M82
	M140 S0

[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready = False
variable_do_mesh = False
variable_do_nominal = False
variable_mesh_min = 0,0
variable_mesh_max = 0,0
variable_probe_count = 0,0
variable_algo = "bicubic"
gcode = 

[gcode_macro COMPUTE_MESH_PARAMETERS]
description = Compute the mesh parameters and store them for later use
gcode = 
	
	{% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
	{% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
	{% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
	{% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
	{% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"]|default('2,2')).split(',')|map('trim')|map('int') %}
	
	{% set margin = params.MARGIN|default(5)|int %}
	{% set force_mesh = params.FORCE_MESH|default(False) %}
	
	
	
	
	{% set coordinatesFound = false %}
	{% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
	RESPOND MSG="Got a SIZE parameter for the adaptive bed mesh"
	{% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
	{% set coordinatesFound = true %}
	
	{% elif printer.exclude_object is defined %}
	{% if printer.exclude_object.objects %}
	
	
	RESPOND MSG="No SIZE parameter, using the [exclude_object] tags for the adaptive bed mesh"
	{% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
	{% set xMinSpec = eo_points|map(attribute=0)|min %}
	{% set yMinSpec = eo_points|map(attribute=1)|min %}
	{% set xMaxSpec = eo_points|map(attribute=0)|max %}
	{% set yMaxSpec = eo_points|map(attribute=1)|max %}
	{% set coordinatesFound = true %}
	{% endif %}
	{% endif %}
	
	{% if not coordinatesFound %}
	
	
	RESPOND MSG="No info about the first layer coordinates, doing a nominal bed mesh instead of adaptive"
	{% endif %}
	
	
	
	
	{% if xMinSpec and yMinSpec and xMaxSpec and yMaxSpec %}
	
	
	
	
	{% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
	{% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
	{% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
	{% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}
	
	
	
	
	{% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
	{% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}
	
	
	
	
	
	
	
	
	{% if xProbeCnt < 3 and yProbeCnt < 3 %}
	{% if force_mesh %}
	RESPOND MSG="Bed mesh forced (small part detected): meshing 3x3..."
	{% set xProbeCnt = 3 %}
	{% set yProbeCnt = 3 %}
	{% set algo = "lagrange" %}
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% else %}
	RESPOND MSG="Computed mesh parameters: none, bed mesh not needed for very small parts"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
	{% endif %}
	{% else %}
	{% set xProbeCnt = [3, xProbeCnt]|max %}
	{% set yProbeCnt = [3, yProbeCnt]|max %}
	
	
	{% if xMeshPPS != 0 or yMeshPPS != 0 %}
	{% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
	{% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
	{% if algo == "lagrange" and probeCntMax > 6 %}
	
	{% set algo = "bicubic" %}
	{% endif %}
	{% if algo == "bicubic" and probeCntMin < 4 %}
	{% if probeCntMax > 6 %}
	
	{% if xProbeCnt > yProbeCnt %}
	{% set yProbeCnt = 5 %}
	{% else %}
	{% set xProbeCnt = 5 %}
	{% endif %}
	{% else %}
	
	{% set algo = "lagrange" %}
	{% endif %}
	{% endif %}
	{% endif %}
	
	
	{% set mesh_min = "%d,%d"|format(xMin, yMin) %}
	{% set mesh_max = "%d,%d"|format(xMax, yMax) %}
	{% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
	RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
	{% endif %}
	{% else %}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}

[gcode_macro ADAPTIVE_BED_MESH]
description = Perform a bed mesh, but only where and when it's needed
gcode = 
	{% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
	
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home printer first!") }
	{% endif %}
	
	
	{% if ready %}
	_DO_ADAPTIVE_MESH
	
	
	
	{% else %}
	RESPOND MSG="Adaptive bed mesh: parameters not already computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
	COMPUTE_MESH_PARAMETERS {rawparams}
	M400
	_DO_ADAPTIVE_MESH
	{% endif %}

[gcode_macro _DO_ADAPTIVE_MESH]
gcode = 
	
	{% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
	{% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
	{% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
	{% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
	{% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
	{% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}
	
	
	
	
	{% if do_mesh %}
	
	{% if do_nominal %}
	RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
	BED_MESH_CALIBRATE
	{% else %}
	RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
	BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}
	{% endif %}
	{% else %}
	RESPOND MSG="Adaptive bed mesh: no mesh to be done"
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP=params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(205)|float %}
	
	
	M117 Homing...
	G90
	M83
	G28 X
	G28
	
	
	M117 Heating bed...
	M140 S{BED_TEMP}
	M190 S{BED_TEMP}
	
	
	M117 Preheating nozzle...
	M104 S{EXTRUDER_TEMP}
	
	
	M117 Z tilt adjust...
	Z_TILT_ADJUST
	
	M117 Bed meshing...
	SET_DISPLAY_TEXT MSG="Bed Meshing"
	BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1
	
	
	M117 Heating nozzle...
	M109 S{EXTRUDER_TEMP}
	
	
	M117 Priming...
	G1 Z5 F3000
	G1 X20 Y5 F1500
	G1 Z0.2 F3000
	G92 E0
	G1 X100 E25 F600
	G1 Y15 F10000
	
	M117 Ready to print

[gcode_macro M106]
description = Lockable fan control
rename_existing = M106.1
variable_lock = 0
gcode = 
	{% set S = params.S|default(0)|int %}
	{% set CURLOCK = printer["gcode_macro M106"].lock %}
	{% if 'L' in params %}
	SET_GCODE_VARIABLE MACRO=M106 VARIABLE=lock VALUE={params.L|default(1)|int}
	M106.1 S{S}
	{% else %}
	{% if CURLOCK == 1%}
	RESPOND TYPE=error MSG="FAN LOCK ON SEND M106 L0 TO REMOVE"
	{% else %}
	M106.1 S{S}
	{% endif %}
	{% endif %}

[gcode_macro pid_bed]
description = run the pid configuration
gcode = 
	{% set bed_temp = params.TEMPERATURE|default(60)|float %}
	PID_CALIBRATE HEATER=heater_bed TARGET={bed_temp}
	SAVE_CONFIG

[gcode_macro pid_extruder]
description = run the pid configuration
gcode = 
	{% set extruder_temp = params.TEMPERATURE|default(200)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={extruder_temp}
	SAVE_CONFIG

[gcode_macro M190]
rename_existing = M190.1
gcode = 
	{% set S=params.S|default(0)| float %}
	{% set R=params.R|default(0) | float%}
	{% set tolerance = params.tolerance | default(1.0) | float %}
	{% if S != 0.0 %}
	M140 S{S}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|float - tolerance}
	{% elif R != 0.0 %}
	M190.1 S{R}
	{% else %}
	M140 S0
	{% endif %}

[gcode_macro M109]
rename_existing = M109.1
gcode = 
	{% set S=params.S|default(0)| float %}
	{% set R=params.R|default(0) | float%}
	{% set tolerance = params.tolerance | default(1.0) | float %}
	{% if S != 0.0 %}
	M104 S{S}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S|float - tolerance}
	{% elif R != 0.0 %}
	M109.1 S{R}
	{% else %}
	M104 S0
	{% endif %}

[gcode_macro M6]
description = manual tool changer
gcode = 
	{% set toolNumb = params.T|float %}
	SAVE_GCODE_STATE NAME=toolChange
	
	RESPOND TYPE=command MSG="action:prompt_begin Changement d'outil"
	RESPOND TYPE=command MSG="action:prompt_text Avez vous inséré l'outil {toolNumb}"
	RESPOND TYPE=command MSG="action:prompt_footer_button Oui|_changed"
	RESPOND TYPE=command MSG="action:prompt_footer_button Annuler l'opération|M112|error"
	RESPOND TYPE=command MSG="action:prompt_show"
	RESTORE_GCODE_STATE NAME=toolChange

[gcode_macro _changed]
description = restart print
gcode = 

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos = True
variable_custom_park_x = 15.0
variable_custom_park_y = 180.0
variable_custom_park_dz = 15
variable_park_at_cancel = True
gcode =
